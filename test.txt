(define x 0)
(set! x (list 1 2 4))
x


class functionDefinitionToken:
    lbp = 10
    def __init__(self, id):
        self.id = id
    def nud(self):
        global functionSet
        functionSet.append(self.id)
        
    
        if self.id in functionSet:
            while True:
                self.string = self.string = "(" + self.id + " " + str(parse())
                if token.symbol() != ",":
                    token = next() # advances past )'
                    self.string = self.string + ")"
                    return self
                 
            
        self.string = "(" + self.id + " " + str(token)
        
        token = next()
        
        while str(token) != ")":
            if str(token) == ",":
                token = next() #skips ,
            self.string =  self.string + " " + str(token)
            token = next()
        token = next() #advances past )
        self.string = self.string + ")"
        
        if not isinstance(token, operatorAssignToken):
            return self
        
        token = next() #advances past :=
       
        self.string2 = "(define " + self.string + " " + str(parse()) + ")"
        self.string = self.string2
        
        return self